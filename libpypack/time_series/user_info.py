from libpypack.locations import map_locations
from libpypack.visualization import generate_maps
from libpypack.visualization import heatmap
from libpypack.visualization import choropleth
import pandas as pd
import glob, os
import imageio


def get_user_df(df, user_value, user_column='User_ID', time_column='Timestamp'):
    '''
    Given a DataFrame with Twitter data or something similar, you can use this to
    generate a DataFrame given a specific User.

    Parameters
    ----------
    df: Pandas DataFrame
            A DataFrame which is similar to Twitter data.

    user_value: str / int
            The value which you want to track i.e., a specific user.

    user_column: str
            The column which contains the user_value.

    time_column: str
            The column which contains the Timestamp information.

    Returns
    -------
    : Pandas DataFrame
      Pandas DataFrame with values only associated with the specific user and sorted by time.

    '''
    return df[df[user_column] == user_value].sort_values(by=time_column).reset_index(drop=True)

def get_min_max_date(aggregate_df, time_column='Timestamp'):
    '''
    Gets the min and max for assicated Timestamp column.

    Parameters
    ----------
    aggregate_df: Pandas DataFrame
            A DataFrame which is similar to Twitter data.

    time_column: str
            The column which contains the Timestamp information.

    Returns
    -------
    : int, int
      min_date, max_date

    '''
    min_date = min(time_df[time_column])
    max_date = max(time_df[time_column])
    return min_date, max_date

def create_user_gif(user_df, gif_filename, output_dir='', png_basename='map'):
    '''
    Generates a GIF for a dataframe, which is used to be able to track specfic users
    or values locations over time.

    Parameters
    ----------
    user_df: Pandas DataFrame
            A DataFrame generated by the get_user_df function.

    gif_filename: str
            The name of the GIF which will be outputted.

    output_dir: str
            Directory to output images of each user at time intervals.

    png_basename: str
            The basename for each image outputted to track a specfic user.

    Returns
    -------
    : int
      Returns 1 if completed.

    '''
    images = []
    filenames = []

    for i in range(0, len(user_df)):
        gdf, loc_gdf = generate_maps.generate_overlay_gdf(user_df[user_df.index == i])
        ax, plot, graph = generate_maps.plot_gdf(gdf, loc_gdf)
        plot.savefig(png_basename + '_{}.png'.format(i))

    for file in glob.glob(output_dir + "*.png"):
        images.append(imageio.imread(file))

    if(gif_filename[-4:] != ".gif"):
        imageio.mimsave(gif_filename + '.gif', images)
    else:
        imageio.mimsave(gif_filename, images)

    return 1
