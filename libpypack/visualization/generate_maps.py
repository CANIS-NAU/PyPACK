import geopandas
import pandas as pd
import libpypack.examples.states_21basic as state_file
import matplotlib.pyplot as plt
import ast
import os
from geopandas.tools import sjoin
from mordecai import Geoparser
from shapely.geometry import Point, Polygon

def create_new_df(tweet_df, column_name='locs'):
    '''
    Given a Twitter DataFrame, this will generate a GeoPandas DataFrame, based on
    the Twitter DataFrame.

    Parameters
    ----------
    tweet_df: Pandas DataFrame
              A DataFrame generated by libpypack.Locations.map_locations().

    column_name: str
              Column name with the locations generated by libpypack.Locations.map_locations()

    Returns
    -------
    : GeoPandas DataFrame
      A GeoPandas DataFrame which can be used by libpypack.visualization.choropleth.plot_map()

    '''
    loc_name = []
    lats = []
    lons = []
    tweet_df.fillna('NA')
    for loc in tweet_df[column_name]:
        try:
            if(loc != "NA"):
                for location, coord in ast.literal_eval(str(loc)).items():
                    loc_name.append(location)
                    lats.append(float(coord[0]))
                    lons.append(float(coord[1]))
        except Exception as e:
            print(e)
            continue

    location_df = pd.DataFrame(
        {'Location Extracted': loc_name,
         'Latitude': lats,
         'Longitude': lons})

    return location_df

def generate_overlay_gdf(tweet_df, shp_path=state_file.__path__[0] + "/states.shp", column_name='locs'):
    '''
    Given a Twitter DataFrame, this will generate a GeoPandas DataFrame, based on
    the Twitter DataFrame.

    Parameters
    ----------
    tweet_df: Pandas DataFrame
              A DataFrame generated by libpypack.Locations.map_locations().

    shp_path: str
              Path of a Shapefile which to overlay locations and generate a map.

    column_name: str
              Column name with the locations generated by libpypack.Locations.map_locations()

    Returns
    -------
    : GeoPandas DataFrame, GeoPandas DataFrame
      gdf: A GeoPandas DataFrame generated from the Shapefile passed in.
      loc_gdf: A GeoPandas DataFrame generated by the location parsed dataframe
               generated by libpypack.Locations.map_locations().

    '''
    location_df = create_new_df(tweet_df, column_name)
    loc_gdf = geopandas.GeoDataFrame(
        location_df, geometry=geopandas.points_from_xy(location_df.Longitude, location_df.Latitude))

    gdf = geopandas.read_file(shp_path)
    return gdf, loc_gdf

def plot_gdf(gdf, loc_gdf, output_dir="", markersize=100, markercolor='orange'):
    '''
    Given a GeoPandas DataFrame of a Shapefile (gdf) and a GeoPandas DataFrame of
    parsed location data (loc_gdf) generated by
    libpypack.visualization.generate_maps.generate_overlay_gdf().

    Parameters
    ----------
    gdf: GeoPandas DataFrame
              GeoPandas DataFrame of a Shapefile generated by:
              libpypack.visualization.generate_maps.generate_overlay_gdf().

    loc_gdf: GeoPandas DataFrame
              GeoPandas DataFrame of parsed locations generated by:
              libpypack.visualization.generate_maps.generate_overlay_gdf().

    output_dir: str
              The directory to save the map image.

    markersize: int
              Column name with the locations generated by libpypack.Locations.map_locations()

    markercolor: str
              Column name with the locations generated by libpypack.Locations.map_locations()

    Returns
    -------
    : GeoPandas Map
        A map of all locations overlayed onto the Shapefile provided.

    '''
    # Plot correctly
    fig, ax = plt.subplots(figsize = (75, 75))
    ax.set_aspect('equal')
    basemap = gdf.plot(ax=ax, edgecolor='black')
    loc_gdf.plot(ax=ax, marker='o', color=markercolor, markersize=markersize)
    plt.savefig(os.path.join(output_dir, "overlay_map.png"))
    return loc_gdf.plot(ax=ax, marker='o', color=markercolor, markersize=markersize)

def lat_lon_to_points(lat_lon_list):
    '''
    Transform a list of [lat, lon] into a list of shapely Points().

    Parameters
    ----------
    lat_lon_list: list
        A Python list of all lat, long points.

    Returns
    -------
    : list
        A Python list which contains shapely Point()

    '''
    point_list = []
    for x in lat_lon_list:
        point_list.append(Point(x))

    return point_list

def points_in_shp(points_list, shapefile_gpd):
    '''
    Check if the points_list generated by libpypack.visualization.generate_maps.lat_lon_to_points()
    is in the Shapefile.

    Parameters
    ----------
    point_list: list
        A list of all lat, lon points generated by:
        libpypack.visualization.generate_maps.lat_lon_to_points()

    shapefile_gpd: dataframe
        A dataframe created from a Shapefile.


    Returns
    -------
    : list, Pandas DataFrame
        pointInPolys: A list of all points that are contained in the Shapefile.
        grouped: A DataFrame which has been grouped.

    '''
    pnts = geopandas.GeoDataFrame(geometry=points_list, index=range(0, len(points_list)))
    pointInPolys = sjoin(pnts, shapefile_gpd, how='left')
    grouped = pointInPolys.groupby('index_right', as_index=False)

    return pointInPolys, grouped

def get_loc_gdf(tweet_df, column_name='locs'):
    '''
    Given a Twitter DataFrame, this will generate a GeoPandas DataFrame, based on
    the Twitter DataFrame.

    Parameters
    ----------
    tweet_df: Pandas DataFrame
              A DataFrame generated by libpypack.Locations.map_locations().

    column_name: str
              Column name with the locations generated by libpypack.Locations.map_locations()

    Returns
    -------
    : GeoPandas DataFrame
      A GeoPandas DataFrame which can be used by libpypack.visualization.heatmap)

    '''
    gdf = create_new_df(tweet_df, column_name=column_name)
    loc_gdf = geopandas.GeoDataFrame(gdf, geometry=geopandas.points_from_xy(gdf.Longitude, gdf.Latitude))
    return loc_gdf
